

=================================================
                Deployment Notes
=================================================


1. 環境

    <Ubuntu-Server 16.04>

    安裝 Docker-Compose:
        - 使用 virtualenv
        - pip install docker-compose

    主要參考資料:
        http://ruddra.com/2016/08/14/docker-django-nginx-postgres/index.html
        https://tomming233.github.io/2017/04/24/用docker部署django应用/


2. 佈署方式:
    1) 從 Github 把程式碼抓到正確位置

    2) 修改一些設定:
        - settings.py 把 HOST IP (目前是 '192.168.0.19' ) 加入 ALLOWED_HOSTS
        - DEBUG 設為 False
        - DB 的密碼，實際上線時記得改掉
        - 更新 requirements.txt :
            cp /root/my_focus_news/deployment/requirements.txt /root/my_focus_news/deployment/docker/python-env/my_focus_news-requirements.txt
            cp /root/news_scraper/requirements.txt /root/my_focus_news/deployment/docker/python-env/news_scraper-requirements.txt

    3) 考慮把目前所有容器都砍掉:
        docker stop $(docker ps -a -q) ; docker rm $(docker ps -a -q)
        
    4) 考慮把前一次 Build 出來的 images 砍掉:
        docker rmi docker_scraper docker_web

    5) cd 到正確位置

    6) docker-compose up -d


3. 其他筆記

    - 如果有改過 Dockerfile 之類的話，啟動前要先把前一次的容器刪掉
      不然看起來 docker-compose 只是將上次的容器重啟，而不會重新產生

        docker stop $(docker ps -a -q) ; docker rm $(docker ps -a -q)

    - 執行:
        cd /root/my_focus_news/deployment/docker
        docker-compose up -d
        (拿掉 -d 可以用來除錯)

4. 先前測試時用到的一些指令

    刪除所有容器:
        docker stop $(docker ps -a -q) ; docker rm $(docker ps -a -q)

    測試 db 是否正常運作:
        psql -h 192.168.0.26 -p 5432 -U dja1 my_focus_news

    進入已執行的容器:
        docker exec -ti web01 /bin/bash

    容器內修改 nginx 的設定檔之後，重啟服務:
        /etc/init.d/nginx restart

5. 之前還不知道 Docker-Compose，試圖自己架構整個服務時留下來的筆記:

  - 編譯 python 環境:
        cd ~/my_focus_news/deployment/dockerfiles/python-debian-env
        docker build -t python-debian-env:001 .

        測試:
            docker run -ti --name pyenv -v /root/my_focus_news:/source:rw --rm python-debian-env:001

        進入容器之後:
            python manage.py migrate

            pip install gunicorn
            gunicorn -b 0.0.0.0:8000 my_focus_news.wsgi:application
            # --bind unix:/socket/mysite.socket

  - 使用官方的 PostgreSQL 環境

        參考: https://hub.docker.com/_/postgres/

        docker run --rm --name db -e POSTGRES_USER=dja1 -e POSTGRES_PASSWORD='aeSDd~ftR53F' -e POSTGRES_DB=my_focus_news -d -p 5432:5432 postgres:10.2-alpine

        測試:

            docker run -ti --rm --name pyenv -v /root/my_focus_news:/source:rw --link db:db python-debian-env:001

  - nginx
        測試官方的 image:
            docker run -ti --rm -v /root/tmp:/data nginx:1.13.8-alpine /bin/sh

        Dockerfile 裡面:
            RUN apk add --no-cache curl